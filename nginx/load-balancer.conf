# Load Balancer Configuration for Creator Clip AI
# Production-ready Nginx configuration with SSL, health checks, and scaling

# Upstream backend servers
upstream backend_servers {
    # Load balancing method: least_conn, ip_hash, or round_robin
    least_conn;
    
    # Backend application instances
    server app1:3000 max_fails=3 fail_timeout=30s weight=1;
    server app2:3000 max_fails=3 fail_timeout=30s weight=1;
    server app3:3000 max_fails=3 fail_timeout=30s weight=1;
    
    # Health check configuration
    keepalive 32;
    keepalive_requests 100;
    keepalive_timeout 60s;
}

# Upstream for WebSocket connections (sticky sessions)
upstream websocket_servers {
    ip_hash; # Ensure WebSocket connections stick to the same server
    
    server app1:3001 max_fails=2 fail_timeout=10s;
    server app2:3001 max_fails=2 fail_timeout=10s;
    server app3:3001 max_fails=2 fail_timeout=10s;
    
    keepalive 16;
}

# Rate limiting zones
limit_req_zone $binary_remote_addr zone=api:10m rate=100r/m;
limit_req_zone $binary_remote_addr zone=upload:10m rate=10r/m;
limit_req_zone $binary_remote_addr zone=auth:10m rate=20r/m;

# Connection limiting
limit_conn_zone $binary_remote_addr zone=perip:10m;

# Cache paths and settings
proxy_cache_path /var/cache/nginx/static levels=1:2 keys_zone=static_cache:10m 
                 max_size=1g inactive=60m use_temp_path=off;
proxy_cache_path /var/cache/nginx/api levels=1:2 keys_zone=api_cache:10m 
                 max_size=100m inactive=10m use_temp_path=off;

# Log format for detailed monitoring
log_format detailed_log '$remote_addr - $remote_user [$time_local] '
                       '"$request" $status $body_bytes_sent '
                       '"$http_referer" "$http_user_agent" '
                       '$request_time $upstream_response_time '
                       '$upstream_addr $upstream_status '
                       '$gzip_ratio $ssl_protocol $ssl_cipher';

# HTTPS redirect server
server {
    listen 80;
    listen [::]:80;
    server_name _;
    
    # Security headers even for redirects
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    
    # Redirect all HTTP to HTTPS
    return 301 https://$host$request_uri;
}

# Main HTTPS server
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name _;
    
    # SSL Configuration
    ssl_certificate /etc/ssl/certs/server.crt;
    ssl_certificate_key /etc/ssl/private/server.key;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
    ssl_prefer_server_ciphers on;
    ssl_stapling on;
    ssl_stapling_verify on;
    
    # HSTS header
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    
    # Security headers
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://cdn.jsdelivr.net; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' https://fonts.gstatic.com; img-src 'self' data: blob: https:; media-src 'self' blob: https:; connect-src 'self' wss: https:; frame-ancestors 'none';" always;
    
    # Logging
    access_log /var/log/nginx/access.log detailed_log;
    error_log /var/log/nginx/error.log warn;
    
    # Connection limits
    limit_conn perip 20;
    
    # Client settings
    client_max_body_size 100M;
    client_body_timeout 60s;
    client_header_timeout 60s;
    
    # Proxy settings
    proxy_connect_timeout 5s;
    proxy_send_timeout 60s;
    proxy_read_timeout 60s;
    proxy_buffers 16 4k;
    proxy_buffer_size 4k;
    proxy_busy_buffers_size 8k;
    proxy_temp_file_write_size 8k;
    
    # Compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;
    
    # Health check endpoint
    location /health {
        access_log off;
        add_header Content-Type text/plain;
        return 200 "healthy\n";
    }
    
    # Load balancer health check
    location /lb-health {
        access_log off;
        proxy_pass http://backend_servers/api/health;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Quick health check timeout
        proxy_connect_timeout 2s;
        proxy_read_timeout 2s;
        proxy_send_timeout 2s;
    }
    
    # WebSocket connections
    location /ws {
        proxy_pass http://websocket_servers;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocket specific timeouts
        proxy_connect_timeout 7s;
        proxy_send_timeout 300s;
        proxy_read_timeout 300s;
        
        # Prevent buffering for real-time communication
        proxy_buffering off;
        proxy_cache off;
    }
    
    # API endpoints with rate limiting
    location /api/ {
        # Rate limiting
        limit_req zone=api burst=20 nodelay;
        
        # Special rate limiting for auth endpoints
        location /api/auth/ {
            limit_req zone=auth burst=5 nodelay;
            proxy_pass http://backend_servers;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # Special rate limiting for upload endpoints
        location /api/upload/ {
            limit_req zone=upload burst=3 nodelay;
            client_max_body_size 500M;
            client_body_timeout 300s;
            
            proxy_pass http://backend_servers;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Upload specific timeouts
            proxy_connect_timeout 10s;
            proxy_send_timeout 300s;
            proxy_read_timeout 300s;
        }
        
        # Cache API responses based on content
        proxy_cache api_cache;
        proxy_cache_valid 200 302 5m;
        proxy_cache_valid 404 1m;
        proxy_cache_bypass $http_cache_control;
        add_header X-Cache-Status $upstream_cache_status;
        
        proxy_pass http://backend_servers;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Request-Start $msec;
    }
    
    # Static assets with aggressive caching
    location /assets/ {
        proxy_cache static_cache;
        proxy_cache_valid 200 1y;
        proxy_cache_valid 404 1m;
        add_header Cache-Control "public, max-age=31536000, immutable";
        add_header X-Cache-Status $upstream_cache_status;
        
        # Try CDN first, fallback to backend
        error_page 404 502 503 504 = @fallback_static;
        
        proxy_pass http://backend_servers;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # Video content with streaming support
    location /videos/ {
        # Enable range requests for video streaming
        proxy_force_ranges on;
        
        # Cache video content
        proxy_cache static_cache;
        proxy_cache_valid 200 206 7d;
        proxy_cache_key $scheme$proxy_host$uri$is_args$args$http_range;
        add_header X-Cache-Status $upstream_cache_status;
        
        # Video streaming headers
        add_header Accept-Ranges bytes;
        add_header Cache-Control "public, max-age=604800"; # 7 days
        
        proxy_pass http://backend_servers;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Range $http_range;
    }
    
    # Thumbnails and images with optimization
    location ~ ^/(thumbnails|images)/ {
        proxy_cache static_cache;
        proxy_cache_valid 200 1d;
        add_header Cache-Control "public, max-age=86400";
        add_header X-Cache-Status $upstream_cache_status;
        
        # Image optimization headers
        add_header Vary "Accept, Accept-Encoding";
        
        proxy_pass http://backend_servers;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # Fallback for static assets
    location @fallback_static {
        proxy_pass http://backend_servers;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        add_header X-Served-By "fallback" always;
    }
    
    # Main application (SPA routing)
    location / {
        # Try to serve static files first, then proxy to backend
        try_files $uri $uri/ @backend;
        
        # Cache static files
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header X-Served-By "nginx" always;
        }
    }
    
    # Backend proxy for SPA
    location @backend {
        proxy_pass http://backend_servers;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Request-Start $msec;
        
        # SPA routing support
        proxy_intercept_errors on;
        error_page 404 = @spa_fallback;
    }
    
    # SPA fallback for client-side routing
    location @spa_fallback {
        proxy_pass http://backend_servers/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # Monitoring endpoints
    location /metrics {
        # Restrict access to monitoring tools
        allow 10.0.0.0/8;
        allow 172.16.0.0/12;
        allow 192.168.0.0/16;
        deny all;
        
        proxy_pass http://backend_servers;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # Deny access to sensitive files
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    location ~ \.(env|git|svn)$ {
        deny all;
        access_log off;
        log_not_found off;
    }
}

# Dedicated server for admin/monitoring tools
server {
    listen 8080 ssl;
    server_name admin.localhost;
    
    # SSL Configuration (same as main server)
    ssl_certificate /etc/ssl/certs/server.crt;
    ssl_certificate_key /etc/ssl/private/server.key;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers on;
    
    # Access control
    allow 10.0.0.0/8;
    allow 172.16.0.0/12;
    allow 192.168.0.0/16;
    deny all;
    
    # Nginx status
    location /nginx-status {
        stub_status on;
        access_log off;
    }
    
    # Upstream status
    location /upstream-status {
        upstream_status;
        access_log off;
    }
    
    # Prometheus metrics
    location /prometheus {
        proxy_pass http://prometheus:9090;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
    
    # Grafana dashboards
    location /grafana/ {
        proxy_pass http://grafana:3000/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}

# Stream block for TCP/UDP load balancing (if needed)
stream {
    # Database connection load balancing
    upstream database_pool {
        server db1:5432 max_fails=2 fail_timeout=10s;
        server db2:5432 max_fails=2 fail_timeout=10s backup;
    }
    
    # Redis cluster load balancing
    upstream redis_pool {
        server redis1:6379 max_fails=2 fail_timeout=5s;
        server redis2:6379 max_fails=2 fail_timeout=5s;
        server redis3:6379 max_fails=2 fail_timeout=5s;
    }
    
    # Database proxy
    server {
        listen 5432;
        proxy_pass database_pool;
        proxy_timeout 1s;
        proxy_responses 1;
    }
    
    # Redis proxy
    server {
        listen 6379;
        proxy_pass redis_pool;
        proxy_timeout 1s;
        proxy_responses 1;
    }
}
